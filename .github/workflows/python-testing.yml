
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install system dependencies using apt
      run: |
        sudo apt-get install openmpi-bin openmpi-common libopenmpi-dev

    - name: Install poetry
      uses: dschep/install-poetry-action@v1.3

    - name: Configure poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project false
        poetry config cache-dir ~/.poetry
        poetry config virtualenvs.path ~/.poetry/venv
 

    - name: Cache poetry venv
      uses: actions/cache@v2
      id: poetry-cache
      with:
        # path: ~/.cache/pypoetry
        path: ~/.poetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          
    - name: Install Dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: poetry install -vv

    - name: Show poetry env info
      run: |
        poetry env info
        poetry config --list

         
    - name: Test with pytest
      run: |
        poetry run pytest -vvv --junitxml=test-junit-reports/result.xml
        
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: Unit Test Results
        files: test-junit-reports/*.xml
        report_individual_runs: true
        deduplicate_classes_by_file_name: false
