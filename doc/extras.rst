Module ``extras``
=================

This package contains additional functionality that is not a core part of the simulator
but rather makes it more convenient to set up and use it. Currently this involves code
for performing multiple simulations while varying parameters ("parameter scan"), reading
and writing parameter sets and simulation output to and from disk as JSON/`JSON Lines`_.
In addition, convenience methods for easily creating graph transport spaces are
included.


Simulations and Parameter Scans
-------------------------------

.. currentmodule:: ridepy.extras.simulation_set

This module allows to configure and execute a set of simulations while varying specific
parameters, i.e. performing a parameter scan.  The typical workflow is as follows:

.. code-block:: python

    # create SimulationSet instance
    simulation_set = SimulationSet(
        base_params={"general": {"n_reqs": 10}},
        product_params={"general": {"n_vehicles": [10, 100], "seat_capacity": [2, 8]}},
        data_dir=tmp_path,
        debug=True,
    )

    # execute simulations
    simulation_set.run()


Parameter Configuration
~~~~~~~~~~~~~~~~~~~~~~~

`SimulationSet` takes three main arguments: ``base_params``, ``zip_params`` and
``product_params``. Base parameters are parameters which are kept constant across all
simulations defined by the simulation set. Here the values of the inner dict are the
actual parameters. For zip and product parameters, lists of values are supplied as the
inner dictionary's values. Zip parameters are varied simultaneously across the
simulations, i.e. the first simulation will use the first parameter value for all of the
parameters in ``zip_params``, the second simulation will use the second parameter
values, and so on. For zip paramaters it is important that all lists of parameter values
are of equal length. The lists in product parameters on the other hand will be
multiplied as a Cartesian product. Here the lengths do not have to match, all possible
combinations will be simulated.

The current list of supported parameters is:

* Valid values for ``general``
    * either ``n_reqs: int`` or ``t_cutoff: float``
    * ``n_vehicles: int``
    * ``seat_capacity: int``
    * ``initial_location: Location``
    * ``space: TransportSpace``
    * ``dispatcher: Dispatcher``
    * ``TransportationRequestCls: Type[TransportationRequest]``
    * ``VehicleStateCls: Type[VehicleStateCls]``
    * ``FleetStateCls: Type[FleetStateCls]``
* Valid values for ``request_generator``
    * ``request_generator: Type[RequestGenerator]``
    * Any request generator keyword argument


Note that not every parameter necessarily needs to be supplied. `SimulationSet` contains
default parameters ``SimulationSet.default_base_params``, which are used for parameters
not specified through arguments. The order of precedence is, last taking highest:
``default_base_params``, ``base_params``, ``zip_params``, ``product_params``.


Executing Simulations
~~~~~~~~~~~~~~~~~~~~~

Simulations are executed when `SimulationSet.run()` is called. Independent simulations
are performed through executing `.perform_single_simulation()` for each parameter set
using multiprocessing. The events that are generated by the simulation are written to
disk in the `JSON Lines`_ format. The simulation parameters are also written to disk, in
separate JSON files.  This includes all data necessary to perform the respective
simulation. For more detail, see :ref:`JSON IO`.  For each simulation run, a unique
identfier is generated and the data is stored to ``<uuid>.jsonl`` for the events and
``<uuid>_params.json`` for the simulation parameters. The identifier hashes the
parameter set, thereby allowing to continue an interrupted simulation set run later.
The IDs generated can be retrieved using `SimulationSet.result_ids`. Alternatively the
filenames of the resulting JSONL/JSON files are also directly available through
`SimulationSet.param_paths` and `SimulationSet.result_paths`.


.. automodule:: ridepy.extras.simulation_set
    :members: SimulationSet

.. automodule:: ridepy.extras.simulation_set
    :members: perform_single_simulation

.. automodule:: ridepy.extras.simulation_set
    :members: simulate_parameter_combinations

JSON IO
-------

.. currentmodule:: ridepy.extras.io

This IO module implements functionality for reading and writing to JSON/`JSON Lines`_
format.

Simulation parameter configurations can be saved and restored using
`.save_params_json()` and `.read_params_json()`. The IO module handles serialization and
deserialization of the ``RequestGenerator``, the dispatcher and the ``TransportSpace``
used for the simulation. This allows to recreate any simulation from its saved parameter
dictionary. Note though that this *does not* serialize the actual objects. If the
implementation of e.g. the dispatcher is modified, the simulation result *will* change.

A list of simulation output events can be saved and restored using `.save_events_json()`
and `.read_events_json()`. The IO module handles serialization and deserialization of
the various event types:

* ``VehicleStateBeginEvent``
* ``VehicleStateEndEvent``
* ``PickupEvent``
* ``DeliveryEvent``
* ``RequestSubmissionEvent``
* ``RequestAcceptanceEvent``
* ``RequestRejectionEvent``

Later this can e.g. be used as input for the analytics module:

.. code-block:: python

    stops, requests = get_stops_and_requests(
        events=read_events_json("events.jsonl"),
        space=read_params_json("params.json")
        )

.. automodule:: ridepy.extras.io
    :members:

Spaces
------

.. currentmodule:: ridepy.extras.spaces

This module implements thin convenience wrappers around ``networkx`` to create common
network topologies to be used as transport spaces.

.. automodule:: ridepy.extras.spaces
    :members:


.. _JSON Lines: https://jsonlines.org/
