Module ``extras``
=================

This package contains additional functionality that is not a core part of the
simulator but rather makes it more convenient to set up and use it. Currently
this involves code for performing multiple simulations while varying parameters
("parameter scan"), reading and writing parameter sets and simulation output to
and from disk as JSON/`JSON Lines`_. In addition,
convenience methods for easily creating graph transport spaces are included.


Simulations and Parameter Scans
-------------------------------

.. currentmodule:: thesimulator.extras.parameter_spaces

This module allows to configure and execute a set of simulations
while varying specific parameters, i.e. performing a parameter scan.
The typical workflow is as follows:

.. code-block:: python

    # get base parameter scan configuration
    conf = get_default_conf(cython=True)

    # modify parameter scan configuration
    conf['general']['n_reqs'] = [1, 10, 100]
    conf['request_generator']['rate'] = [1000]

    # execute simulations
    simulate_parameter_combinations(data_dir=output_path, conf=conf)

Parameter Scan Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For `.simulate_parameter_combinations()` to work, all parameters in the base parameter scan configuration supplied by `.get_default_conf()`
must be present. The general schema of the parameter scan configuration dictionary is an outer dictionary
indexed by specific strings and containing inner dictionaries as values which are indexed by strings
and contain lists of possible values for each parameter.
Its type is ``dict[Literal["general", "space", "environment"], dict[str, list[Any]]]``,
for example ``conf = {"general": {"param1": [value1, value2]}, "request_generator": {"param42": [value2]}}``.

The values and types allowed as list elements in the inner dict are the following:

* Valid values for ``general``
    * ``n_reqs: int``
    * ``space: TransportSpace``
    * ``n_vehicles: int``
    * ``initial_location: Location``
    * ``seat_capacity: int``
    * ``dispatcher: Dispatcher``
* Valid values for ``request_generator``
    * ``request_generator: Type[RequestGenerator]``
    * ``rate: int``
    * ``max_pickup_delay: int``
    * ``max_pickup_delivery_delay_rel: int``
    * ``seed: int``
* Valid values for ``environment``
    * ``TransportationRequestCls: Type[TransportationRequest]``
    * ``VehicleStateCls: Type[VehicleStateCls]``
    * ``FleetStateCls: Type[FleetStateCls]``
    * ``data_dir: PosixPath``
    * ``chunksize: int``


.. automodule:: thesimulator.extras.parameter_spaces
    :members: get_default_conf, param_scan_cartesian_product, iterate_zip_product


Executing Simulations
~~~~~~~~~~~~~~~~~~~~~

When `.simulate_parameter_combinations()` is called, independent simulations are performed for each parameter set drawn from
the parameter scan configuration. The events that are generated by the simulation are written to disk
in the `JSON Lines`_ format. The simulation parameters are also written to disk, in a separate JSON file.
This includes all data necessary to perform the respective simulation. For more detail, see :ref:`JSON IO`.
For each simulation run, a UUID is generated and the data is stored to ``<uuid>.jsonl`` for the
events and ``<uuid>_params.json`` for the simulation parameters. The UUIDs generated during a
parameter scan are returned by `.simulate_parameter_combinations()`.

The general schema of the (single) simulation configuration dictionary is again an outer dictionary
indexed by specific strings and containing inner dictionaries as values which are indexed by strings.
Unlike the parameter scan dictionary the parameter values are now single values, not lists of values.

Its type is ``dict[Literal["general", "space", "environment"], dict[str, Any]]``,
for example ``conf = {"general": {"param1": value1}, "request_generator": {"param42": value2}}``.

The values and types allowed as values in the inner dict are again the following:

* Valid values for ``general``
    * ``n_reqs: int``
    * ``space: TransportSpace``
    * ``n_vehicles: int``
    * ``initial_location: Location``
    * ``seat_capacity: int``
    * ``dispatcher: Dispatcher``
* Valid values for ``request_generator``
    * ``request_generator: Type[RequestGenerator]``
    * ``rate: int``
    * ``max_pickup_delay: int``
    * ``max_pickup_delivery_delay_rel: int``
    * ``seed: int``
* Valid values for ``environment``
    * ``TransportationRequestCls: Type[TransportationRequest]``
    * ``VehicleStateCls: Type[VehicleStateCls]``
    * ``FleetStateCls: Type[FleetStateCls]``
    * ``data_dir: PosixPath``
    * ``chunksize: int``


.. automodule:: thesimulator.extras.parameter_spaces
    :members: simulate_parameter_combinations, simulate_parameter_space


JSON IO
-------

.. currentmodule:: thesimulator.extras.io

This IO module implements functionality for reading and writing to JSON/`JSON Lines`_ format.

Simulation parameter configurations can be saved and restored using `.save_params_json()` and
`.read_params_json()`. The IO module handles serialization and deserialization of the ``RequestGenerator``,
the dispatcher and the ``TransportSpace`` used for the simulation. This allows to recreate any simulation
from its saved parameter dictionary. Note though that this *does not* serialize the actual objects. If the
implementation of e.g. the dispatcher is modified, the simulation result *will* change.

A list of simulation output events can be saved and restored using `.save_events_json()` and
`.read_events_json()`. The IO module handles serialization and deserialization of the various event types:

* ``VehicleStateBeginEvent``
* ``VehicleStateEndEvent``
* ``PickupEvent``
* ``DeliveryEvent``
* ``RequestSubmissionEvent``
* ``RequestAcceptanceEvent``
* ``RequestRejectionEvent``

Later this can e.g. be used as input for the analytics module:

.. code-block:: python

    stops, requests = get_stops_and_requests(
        events=read_events_json("events.jsonl"),
        space=read_params_json("params.json")
        )

.. automodule:: thesimulator.extras.io
    :members:

Spaces
------

.. currentmodule:: thesimulator.extras.spaces

This module implements thin convenience wrappers around ``networkx`` to create
common network topologies to be used as transport spaces.

.. automodule:: thesimulator.extras.spaces
    :members:


.. _JSON Lines: https://jsonlines.org/